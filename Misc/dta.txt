In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);

In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
In this example:

We import the crypto module, which provides cryptographic functionality in Node.js.
We define the encrypt function that takes a string and a key, and performs AES encryption using the createCipher method from the crypto module.
We define the decrypt function that takes an encrypted string and a key, and performs AES decryption using the createDecipher method from the crypto module.
We use these functions to encrypt and decrypt the originalText using the encryptionKey.
The encrypted data is stored in the encryptedData variable, and the decrypted data is stored in the decryptedData variable.
Finally, we log the encrypted and decrypted data to the console.
Note that in a real-world scenario, it is important to handle keys and encrypted data securely, and this example is for demonstration purposes only. Additionally, you may want to handle error cases and ensure proper error handling and key management in your project.
const crypto = require('crypto');

// Encrypts a given string using AES encryption
function encrypt(text, key) {
  const cipher = crypto.createCipher('aes-256-cbc', key);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

// Decrypts a given encrypted string using AES decryption
function decrypt(encryptedText, key) {
  const decipher = crypto.createDecipher('aes-256-cbc', key);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Example usage
const originalText = 'Sensitive data!';
const encryptionKey = 'mySecretKey';

// Encrypting the data
const encryptedData = encrypt(originalText, encryptionKey);
console.log('Encrypted data:', encryptedData);

// Decrypting the data
const decryptedData = decrypt(encryptedData, encryptionKey);
console.log('Decrypted data:', decryptedData);
